cmake_minimum_required(VERSION 3.8.2)
project(cils)

# detect C++ compiler - the C compiler must be the same type too
if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU" OR "${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set(CXX_COMPILER_GNUCLANG TRUE)
    if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
        set(CXX_COMPILER_GNU TRUE)
        message(STATUS "GNU C++ compiler detected")
        if (NOT ("${CMAKE_C_COMPILER_ID}" MATCHES "GNU"))
            message(SEND_ERROR "C and C++ compilers should match!")
        endif ()
    else ()
        set(CXX_COMPILER_CLANG TRUE)
        message(STATUS "Clang C++ compiler detected")
        if (NOT ("${CMAKE_C_COMPILER_ID}" MATCHES "Clang"))
            message(SEND_ERROR "C and C++ compilers should match!")
        endif ()
    endif ()
elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Intel")
    set(CXX_COMPILER_INTEL TRUE)
    message(STATUS "Intel C++ compiler detected")
    if (NOT ("${CMAKE_C_COMPILER_ID}" MATCHES "Intel"))
        message(SEND_ERROR "C and C++ compilers should match!")
    endif ()
elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Cray")
    set(CXX_COMPILER_CRAY TRUE)
    message(STATUS "Cray C++ compiler detected")
    if (NOT ("${CMAKE_C_COMPILER_ID}" MATCHES "Cray"))
        message(SEND_ERROR "C and C++ compilers should match!")
    endif ()
elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "PGI")
    set(CXX_COMPILER_PGI TRUE)
    message(STATUS "PGI C++ compiler detected")
    if (NOT ("${CMAKE_C_COMPILER_ID}" MATCHES "PGI"))
        message(SEND_ERROR "C and C++ compilers should match!")
    endif ()
else ()
    message(SEND_ERROR "Could not identify compiler!")
endif ()

# Basic options
if (CXX_COMPILER_GNUCLANG OR CXX_COMPILER_INTEL)
    set(CMAKE_CXX_FLAGS "-std=c++14")
    set(CMAKE_C_FLAGS "-std=c11")
    set(CMAKE_CXX_FLAGS_DEBUG "-g")
    set(CMAKE_CXX_FLAGS_RELEASE "-O3")
elseif (CXX_COMPILER_PGI)
    set(CMAKE_CXX_FLAGS "-std=c++14")
    set(CMAKE_C_FLAGS "-std=c11")
    set(CMAKE_CXX_FLAGS_DEBUG "-g")
    set(CMAKE_CXX_FLAGS_RELEASE "-O2")
elseif (CXX_COMPILER_CRAY)
    set(CMAKE_CXX_FLAGS "-h std=c++14 -h error_on_warning")
    set(CMAKE_C_FLAGS "-h std=c11 -h error_on_warning")
    set(CMAKE_CXX_FLAGS_DEBUG "-g -O1")
    set(CMAKE_CXX_FLAGS_RELEASE "-O2")
endif ()

# to compile with OpenMP
if (CXX_COMPILER_GNUCLANG)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopenmp")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fopenmp")
    message(STATUS "Compiling with OpenMP for GNU")
elseif (CXX_COMPILER_INTEL)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -qopenmp")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -qopenmp")
    message(STATUS "Compiling with OpenMP for Intel")
elseif (CXX_COMPILER_CRAY)
    message(STATUS "Compiling with OpenMP for Cray")
elseif (CXX_COMPILER_PGI)
    message(STATUS "Compiling with OpenMP for PGI")
else ()
    message(SEND_ERROR "Don't know OpenMP flag for this compiler!")
endif ()

# set verbosity options
if ("${CMAKE_CXX_COMPILER_ID}" MATCHES "GNU")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fopt-info-inline-vec-optimized-missed=optimizations.info")
elseif ("${CMAKE_CXX_COMPILER_ID}" MATCHES "Clang")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Rpass=inline,vectorize")
elseif (CXX_COMPILER_INTEL)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -qopt-report=5 -qopt-report-phase=cg,loop,vec,openmp")
elseif (CXX_COMPILER_CRAY)
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -hlist=a -hreport=fisv")
endif ()

find_package(PythonInterp 3)
find_package(Python REQUIRED)
find_package(PythonLibs 3.8 REQUIRED)
find_package(OpenMP REQUIRED)
find_package(Eigen3 REQUIRED)
#find_package(OpenCL REQUIRED)
#find_package(MPI REQUIRED)
#find_package(netCDF REQUIRED)
#find_package(Matlab REQUIRED)
set(CMAKE_CXX_STANDARD 14)

#if (MPI_FOUND)
#    include_directories(${MPI_C_INCLUDE_PATH} ${MPI_CXX_INCLUDE_PATH})
#    if(SLURM)
#        set(MPIEXEC "srun")
#        set(MPIOPTS "--cpu-bind=cores")
#    else()
#        set(MPIEXEC "mpirun")
#        set(MPIOPTS "")
#    endif(SLURM)
#
#endif ()
include_directories(${PYTHON_INCLUDE_DIRS})

add_executable(cils main.cpp src/include/config.h)

if (MPI_FOUND)
    target_link_libraries(cils ${MPI_LIBRARIES})
    message("-- MPI_FOUND")
endif ()

if (OpenMP_CXX_FOUND)
    target_link_libraries(cils OpenMP::OpenMP_CXX)
    message("-- OpenMP_CXX_FOUND")
endif ()

#if (netCDF_FOUND)
#    target_link_libraries(cils ${netCDF_LIBRARIES})
#    message("-- netCDF_FOUND")
#endif ()

#
#if (OpenCL_FOUND)
#    target_link_libraries(cils ${OPENCL_LIBRARIES})
#    message("-- OpenCL_FOUND")
#endif ()
#
#if (LAPACK_FOUND)
#    target_link_libraries(cils ${LAPACK_LIBRARIES})
#    message("-- LAPACK_FOUND")
#endif ()

if (Python_FOUND)
    target_link_libraries(cils ${PYTHON_LIBRARIES})
    message("-- Python_FOUND ${PYTHON_INCLUDE_DIRS} ${PYTHON_LIBRARIES}")
endif ()

if (Eigen3_FOUND)
    target_link_libraries(cils Eigen3::Eigen)
    message("-- Eigen3_FOUND")
endif ()